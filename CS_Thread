package maekawa_verify;

import java.util.ArrayList;
import java.util.Random;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;

public class CS_Thread implements Runnable{

	CSCheck csCheck;
	// My own index
	int index;
	TreeMap<Integer, String> nodeValue;
	Application_module module1;
	ArrayList<Integer> quorum;
	Boolean run;
	Boolean test;
	// Get the value from previously run CS.
	// passed from Server thread
	public CS_Thread(TreeMap<Integer, String> nodeValue, int index, ArrayList<Integer> quorum, CSCheck csCheck, Boolean run, Boolean test){
		this.nodeValue = nodeValue;
		this.index = index;
		this.csCheck = csCheck;
		this.run = run;
		this.test = test;
		this.quorum = quorum;
		module1 = new Application_module();
	}
	
	public void run() {
		// Code for critical section, need another object that has module_1 code, need to decouple the application module
		// Implement its own logical clock
		// Maintain a file, that keeps the start and end times for each critical section
		// This sends the GO messages to its own server
		try {
			TimeUnit.SECONDS.sleep(40);
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	if(run)
		{				// Loop here to keep on executing Critical Section
		for(int i = 1; i <= 5; i++){	
			cs_enter();
			System.out.println();
			// Start Time for CS
			int s = csCheck.getCsClock();
			module1.runCS();
			// Increment the Critical Section Logical Clock
			csClock();
			// End Time for CS
			int t = csCheck.getCsClock();
		
			cs_leave(s,t);
		}
		System.out.println("Done Requesting Critical Section - "+index);
	}
	
	// I will get the times for VERIFICATION
	if(test){
		if(!run){
			try {
				TimeUnit.SECONDS.sleep(200);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		StringBuffer req=new StringBuffer().append("INFO").append(",").append(index);
		for(int i = 1; i <= nodeValue.size(); i++){
			Thread client = new Thread(new Client_Thread(nodeValue.get(i), req.toString()));
			client.start();
		}
	}
}

	// randomly increment clock
	public void csClock(){
		csCheck.setCsClock(csCheck.getCsClock()+new Random().nextInt(100)+10);
	}
	
	// Generate Request
	// Block itself till got permission to execute CS
	public void cs_enter(){
		try {
			String controlMsg = new StringBuffer().append("REQ").append(",").append(index).append(",").append(csCheck.getClock()).toString();
			for(Integer i : quorum){
				Thread client = new Thread(new Client_Thread(nodeValue.get(i), controlMsg));
				client.start();
			}
			// Blocking Itself
			csCheck.get();
		} catch (Exception e) {
			System.out.println("CS_THREAD: exception occured");
		}
	}
	
	// Called after Critical Section is done executing
	public void cs_leave(int s, int t){
		// Send out GO,s,t,P(i) message to everyone
		String controlMsg = new StringBuffer().append("GO").append(",").append(s).append(",").append(t).append(",").append(index).toString();
		System.out.println("CS TIMES: "+s+" , "+t);
		for(int i = 1; i <= nodeValue.size(); i++){
			Thread client = new Thread(new Client_Thread(nodeValue.get(i), controlMsg));
			client.start();
		}
	}
	
}
